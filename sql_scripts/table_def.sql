DROP DATABASE IF EXISTS TRUST_TENANT;
CREATE DATABASE TRUST_TENANT;
USE TRUST_TENANT;

DROP USER IF EXISTS 'tt-api'@'localhost';
CREATE USER 'tt-api'@'localhost' IDENTIFIED BY 'cpsc471';
GRANT SELECT, UPDATE, DELETE, INSERT ON TRUST_TENANT.* TO 'tt-api'@'localhost';

DROP TABLE IF EXISTS USER;
CREATE TABLE USER (
	UserId			int UNSIGNED NOT NULL AUTO_INCREMENT,
	Email			varchar(40) NOT NULL UNIQUE,
	Password		varchar(30) NOT NULL,
	FName			varchar(25),
	LName			varchar(25),
	Role			enum('USER', 'LORD', 'MOD', 'ADMIN') NOT NULL,
	PRIMARY KEY (UserId)
);

DROP TABLE IF EXISTS COMMUNITY;
CREATE TABLE COMMUNITY (
	CommunityId		int UNSIGNED NOT NULL AUTO_INCREMENT,
	Name			varchar(30) NOT NULL UNIQUE,
	PRIMARY KEY (CommunityId)
);

DROP TABLE IF EXISTS COMMUNITY_AMENITIES;
CREATE TABLE COMMUNITY_AMENITIES (
	CommunityId		int UNSIGNED NOT NULL,
	Amenity			varchar(20),
	PRIMARY KEY (CommunityId, Amenity),
	FOREIGN KEY (CommunityId) REFERENCES COMMUNITY(CommunityId)
                ON UPDATE CASCADE ON DELETE CASCADE
);

DROP TABLE IF EXISTS PROPERTY;
CREATE TABLE PROPERTY (
	PropertyId		int UNSIGNED NOT NULL AUTO_INCREMENT,
	Address			varchar(100) NOT NULL UNIQUE,
	Type			varchar(20),
	OwnerId			int UNSIGNED NOT NULL,
	CommunityId		int UNSIGNED,
	PRIMARY KEY (PropertyId),
	FOREIGN KEY (OwnerId) REFERENCES USER(UserId)
                ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (CommunityId) REFERENCES COMMUNITY(CommunityId)
                ON DELETE CASCADE ON UPDATE CASCADE
);

DROP TABLE IF EXISTS REVIEW;
CREATE TABLE REVIEW (
	ReviewNum		int UNSIGNED NOT NULL AUTO_INCREMENT,
	PropertyId		int UNSIGNED,
	CommunityId		int UNSIGNED,
	UserEmail		varchar(40),
	Header			varchar(50),
	Body			varchar(300),
	Score			int NOT NULL CHECK ( Score BETWEEN 0 AND 10 ),
	PRIMARY KEY (ReviewNum),
	FOREIGN KEY (PropertyId) REFERENCES PROPERTY(PropertyId),
	FOREIGN KEY (CommunityId) REFERENCES COMMUNITY(CommunityId),
	FOREIGN KEY (UserEmail) REFERENCES USER(Email)
				ON UPDATE CASCADE ON DELETE SET NULL,
	CHECK ( PropertyId IS NOT NULL XOR CommunityId IS NOT NULL )
);

CREATE TRIGGER DELETE_PROP BEFORE DELETE ON PROPERTY
	FOR EACH ROW
	BEGIN
	DELETE FROM REVIEW r
		WHERE r.PropertyId = OLD.PropertyId;
	END;

CREATE TRIGGER DELETE_COMM BEFORE DELETE ON COMMUNITY
	FOR EACH ROW
	BEGIN
		DELETE FROM REVIEW r
			WHERE r.CommunityId = OLD.CommunityId;
	END;


DROP TABLE IF EXISTS COMPLAINT;
CREATE TABLE COMPLAINT (
	ComplaintNum	int UNSIGNED NOT NULL AUTO_INCREMENT,
	ComplainerId	int UNSIGNED,
	Header			varchar(50),
	Body			varchar(300),
	Status			varchar(10),
	PRIMARY KEY (ComplaintNum),
	FOREIGN KEY (ComplainerId) REFERENCES USER(UserId)
            	ON UPDATE CASCADE ON DELETE SET NULL
);

DROP TABLE IF EXISTS REVIEW_COMPLAINT;
CREATE TABLE REVIEW_COMPLAINT (
	ComplaintNum	int UNSIGNED,
	ReviewNum		int UNSIGNED,
	PRIMARY KEY (ComplaintNum, ReviewNum),
	FOREIGN KEY (ComplaintNum) REFERENCES COMPLAINT(ComplaintNum)
                ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (ReviewNum) REFERENCES REVIEW(ReviewNum)
            	ON UPDATE CASCADE ON DELETE CASCADE
);

DROP TABLE IF EXISTS PROPERTY_TAGS;
CREATE TABLE PROPERTY_TAGS (
	PropertyId		int UNSIGNED,
	Tag				varchar(15),
	PRIMARY KEY (PropertyId, Tag),
	FOREIGN KEY (PropertyId) REFERENCES PROPERTY(PropertyId)
                ON DELETE CASCADE ON UPDATE CASCADE
);

DROP TABLE IF EXISTS LISTING;
CREATE TABLE LISTING (
	ListingNum		int UNSIGNED NOT NULL AUTO_INCREMENT,
	PropertyId		int UNSIGNED NOT NULL,
	Type			varchar(40),
	NumBeds			int NOT NULL,
	NumBaths		float NOT NULL,
	SqrFootage		int NOT NULL,
	Rent			int NOT NULL,
	Status			enum('HIDDEN', 'PENDING', 'ACTIVE'),
	PRIMARY KEY (ListingNum, PropertyId),
	FOREIGN KEY (PropertyId) REFERENCES PROPERTY(PropertyId)
                ON UPDATE CASCADE ON DELETE CASCADE
);

DROP TABLE IF EXISTS LISTING_COMP;
CREATE TABLE LISTING_COMP (
	ComplaintNum	int UNSIGNED,
	PropertyNum		int UNSIGNED,
	ListingNum		int UNSIGNED,
	PRIMARY KEY (ComplaintNum, PropertyNum, ListingNum),
	FOREIGN KEY (PropertyNum) REFERENCES PROPERTY(PropertyId)
				ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (ComplaintNum) REFERENCES COMPLAINT(ComplaintNum)
                ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (ListingNum) REFERENCES LISTING(ListingNum)
                ON UPDATE CASCADE ON DELETE CASCADE
);

DROP TABLE IF EXISTS LISTING_DESC;
CREATE TABLE LISTING_DESC (
	PropertyId		int UNSIGNED,
	ListingNum		int UNSIGNED,
	Descriptor		enum('smoking', 'pet-friendly', 'furnished', 'utilities-included'),
	PRIMARY KEY (PropertyId, ListingNum, Descriptor),
	FOREIGN KEY (PropertyId) REFERENCES PROPERTY(PropertyId)
				ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (ListingNum) REFERENCES LISTING(ListingNum)
            	ON DELETE CASCADE ON UPDATE CASCADE
);